/**
 * Return an array of arrays of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int cmp(const void *a,const void *b)
{
    return (*(int*)a-*(int*)b);
}

int** fourSum(int* nums, int numsSize, int target, int* returnSize) {
    if(numsSize<4||nums==NULL)
    {
        return NULL;
    }
    int **ans=NULL;
    int count=0;
    qsort(nums,numsSize,sizeof(nums[0]),cmp);
    for(int i=0;i<numsSize-3;i++)
    {
        if(i>0&&nums[i]==nums[i-1])  //handle duplicate
            {
                continue;
            }
        for(int j=i+1;j<numsSize-2;j++)
        {
            if(j>i+1&&nums[j]==nums[j-1])  //handle duplicate
            {
                continue;
            }
            int leftP=j+1;
            int rightP=numsSize-1;
            int sum;

            while(leftP<rightP)
            {
                sum=nums[i]+nums[j]+nums[leftP]+nums[rightP];
                if(sum==target)
                {
                    ans=(int**)realloc(ans,sizeof(int*)*(count+1));
                    ans[count]=(int*)malloc(sizeof(int)*4);
                    ans[count][0]=nums[i];
                    ans[count][1]=nums[j];
                    ans[count][2]=nums[leftP];
                    ans[count][3]=nums[rightP];
                    count++;
                    //if(count==4)
                    while(leftP<rightP&&nums[leftP]==nums[leftP+1])
                {
                    leftP++;
                }
                    while(leftP<rightP&&nums[rightP]==nums[rightP-1])
                {
                    rightP--;
                }
                    leftP++;
                    rightP--;
                }
                else if(leftP<rightP&&sum<target)
                {
                    leftP++;
                }
                else if(leftP<rightP&&sum>target)
                {
                    rightP--;
                }
            }
        }
    }
    *returnSize=count;
    //printf("%d\n",count);
    return ans;
}
