/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include<stdio.h>
#include<stdlib.h>

int* searchRange(int* nums, int numsSize, int target, int* returnSize) {
    int *ans=(int *)malloc(sizeof(int)*2);
    *returnSize=2;
    if (numsSize==0||target<nums[0]||target>nums[numsSize-1])
    {
        ans[0]=-1;ans[1]=-1;
        return ans;
    }
    int left=0,right=numsSize-1,center;
    //if(left==right)
    while(left<=right)
    {
        center=(left+right)/2;
        if(nums[center]==target)
        {
            int i=center,j=center;
            while(i>0&&nums[i-1]==target) i--;
            while(j<numsSize-1&&nums[j+1]==target) j++;
            ans[0]=i;ans[1]=j;
            return ans;
        }
        else if(nums[center]>target)
        {
            right=center;
        }
        else
        {
            left=center+1;
        }
        if(left==right&&nums[left]==target)
        {
            ans[0]=left;ans[1]=left;
            return ans;
        }
        else if(left==right&&nums[left]!=target)
        {
            ans[0]=-1;ans[1]=-1;
            return ans;
        }
    }
    ans[0]=-1;ans[1]=-1;
    return ans;
}


int main()
{
    int a[6]={0,0,0,1,2,3};
    int *p;
    int *temp;
    temp=searchRange(a,6,0,&p);
    printf("%d%d\n",temp[0],temp[1]);
    free(temp);
    return 0;
}
