double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {

    //ensure nums2Size>nums1Size
    if(nums1Size>nums2Size)
    {
        int *temp=nums1;nums1=nums2;nums2=temp;
        int cc=nums1Size;nums1Size=nums2Size;nums2Size=cc;
    }
    //
    int iMin=0,iMax=nums1Size;
    while(iMin<=iMax)
    {
        int i=(iMin+iMax)/2,j=(nums1Size+nums2Size+1)/2-i;
        if(i<iMax&&nums1[i]<nums2[j-1])
        {
            iMin=i+1;
        }
        else if(i>iMin&&nums1[i-1]>nums2[j])
        {
            iMax=i-1;
        }
        else
        {
            int leftMax=0;
            if(i==0)
            {
                leftMax=nums2[j-1];
            }
            else if(j==0)
            {
                leftMax=nums1[i-1];
            }
            else
            {
                leftMax=nums1[i-1]>nums2[j-1]? nums1[i-1]:nums2[j-1];
            }

            //odd or even
            if((nums1Size+nums2Size)%2==1)
            {
                return leftMax;
            }

            int rightMin=0;
            if(i==nums1Size)
            {
                rightMin=nums2[j];
            }
            else if(j==nums2Size)
            {
                rightMin=nums1[i];
            }
            else
            {
                rightMin=nums1[i]<nums2[j]? nums1[i]:nums2[j];
            }

            return (rightMin+leftMax)/2.0;

        }

    }
    return 0;
}
